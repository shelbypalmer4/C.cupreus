yend = 0),
size=1.5,
arrow = arrow(length = unit(0.3,"cm"))) +
# adding title and axis labels
xlab(expression("Dispersal Ability")) +
ylab("Speciation Rate")
ggplot(data = data.frame(x = c(-4,4)),
aes(x)) +
# plotting the student's t distribution at the right fraction of x to give us the steepness we want
stat_function(fun = function(x) dt(0.6*x, df = 12),
size=1.25,
color=FF0000) +
# getting rid of grid, background, axis number labels, tick marks...this is gonna be a handy little chunk of code I suspect
theme(panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
panel.background = element_blank(),
axis.text.x=element_blank(),
axis.ticks.x=element_blank(),
axis.text.y=element_blank(),
axis.ticks.y=element_blank()) +
# adding arrows to the axes
geom_segment(aes(x=-4.4,
xend = -4.4,
y=0,
yend = 0.45),
size=1.5,
arrow = arrow(length = unit(0.3,"cm"))) +
geom_segment(aes(x=-4.43,
xend = 4.7,
y=0,
yend = 0),
size=1.5,
arrow = arrow(length = unit(0.3,"cm"))) +
# adding title and axis labels
xlab(expression("Dispersal Ability")) +
ylab("Speciation Rate")
ggplot(data = data.frame(x = c(-4,4)),
aes(x)) +
# plotting the student's t distribution at the right fraction of x to give us the steepness we want
stat_function(fun = function(x) dt(0.6*x, df = 12),
size=1.25,
color="FF0000") +
# getting rid of grid, background, axis number labels, tick marks...this is gonna be a handy little chunk of code I suspect
theme(panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
panel.background = element_blank(),
axis.text.x=element_blank(),
axis.ticks.x=element_blank(),
axis.text.y=element_blank(),
axis.ticks.y=element_blank()) +
# adding arrows to the axes
geom_segment(aes(x=-4.4,
xend = -4.4,
y=0,
yend = 0.45),
size=1.5,
arrow = arrow(length = unit(0.3,"cm"))) +
geom_segment(aes(x=-4.43,
xend = 4.7,
y=0,
yend = 0),
size=1.5,
arrow = arrow(length = unit(0.3,"cm"))) +
# adding title and axis labels
xlab(expression("Dispersal Ability")) +
ylab("Speciation Rate")
ggplot(data = data.frame(x = c(-4,4)),
aes(x)) +
# plotting the student's t distribution at the right fraction of x to give us the steepness we want
stat_function(fun = function(x) dt(0.6*x, df = 12),
size=1.25,
color="grey65") +
# getting rid of grid, background, axis number labels, tick marks...this is gonna be a handy little chunk of code I suspect
theme(panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
panel.background = element_blank(),
axis.text.x=element_blank(),
axis.ticks.x=element_blank(),
axis.text.y=element_blank(),
axis.ticks.y=element_blank()) +
# adding arrows to the axes
geom_segment(aes(x=-4.4,
xend = -4.4,
y=0,
yend = 0.45),
size=1.5,
arrow = arrow(length = unit(0.3,"cm"))) +
geom_segment(aes(x=-4.43,
xend = 4.7,
y=0,
yend = 0),
size=1.5,
arrow = arrow(length = unit(0.3,"cm"))) +
# adding title and axis labels
xlab(expression("Dispersal Ability")) +
ylab("Speciation Rate")
library(tidyverse)
library(installr)
?setwd
getwd
bcch1 <- read.delim("C:/Users/Shelby Palmer/Desktop/CHICKADEES/winter 2022 song analyses/BCCH measurements/Poecile.atricapillus_Apr142020_HarveyCoWestPark.Harvey.KS_gf.Table.1.selections.txt")
View(bcch1)
bcch2 <- read.delim("C:/Users/Shelby Palmer/Desktop/CHICKADEES/winter 2022 song analyses/BCCH measurements/Poecile.atricapillus_Mar142021_LionsConservancy.Cass.ND_ag.Table.1.selections.txt")
c(bcch1, bcch2)
BCCHdata<-c(bcch1, bcch2)
AllFiles <- list.files(path = "C:\Users\Shelby Palmer\Desktop\CHICKADEES\winter 2022 song analyses\BCCH measurements",
recursive = TRUE,
pattern = "\\.txt$",
full.names = TRUE)
idk <- read.delim("C:/Users/Shelby Palmer/Desktop/CHICKADEES/winter 2022 song analyses/BCCH measurements/Poecile.atricapillus_Apr142020_HarveyCoWestPark.Harvey.KS_gf.Table.1.selections.txt")
View(idk)
AllFiles <- list.files(path = "C:/Users/Shelby Palmer/Desktop/CHICKADEES/winter 2022 song analyses/BCCH measurements/",
recursive = TRUE,
pattern = "\\.txt$",
full.names = TRUE)
View(AllFiles)
install.packages("vroom",
dependencies = TRUE,
repos = "https://cran.rstudio.com")
library(vroom)
# Read all the files and create a FileName column to store filenames
BCCHsongs <- vroom(AllFiles, .id = "FileName")
# Read all the files and create a FileName column to store filenames
BCCHsongs <- vroom(AllFiles)
View(BCCHsongs)
AllFilesCa <- list.files(path = "C:/Users/Shelby Palmer/Desktop/CHICKADEES/winter 2022 song analyses/CACH measurements/",
recursive = TRUE,
pattern = "\\.txt$",
full.names = TRUE)
CACHsongs <- vroom(AllFiles)
View(CACHsongs)
AllFiles
?vroom
CACHsongs <- vroom(AllFiles, id="FileName")
View(CACHsongs)
install.packages("esquisse")
install.packages("Rtools")
install.packages(conStruct)
install.packages("conStruct")
# install.packages("conStruct")
library(conStruct)
?as.matrix
# making fake data
SPPUA<-matrix(data=c(1,1,0.9,1,0.95,1,0.85,0.5,0.55,0.6,0.2,0.25,0.2,0.1,0,0,0),
nrow=17)
make.structure.plot(
admix.proportions=SPPUA,
mar = c(2, 4, 2, 2),
sample.order = NULL,
layer.order = NULL,
sample.names = NULL,
sort.by = NULL,
layer.colors = NULL
)
# making fake data
SPPUA<-matrix(data=c(1,1,0.9,1,0.95,1,0.85,0.5,0.55,0.6,0.2,0.25,0.2,0.1,0,0,0,
0,0,0.1,0,0.05,0,0.15,0.5,0.45,0.4,0.8,0.75,0.8,0.9,1,1,1),
nrow=17,
ncol=2)
make.structure.plot(
admix.proportions=SPPUA,
mar = c(2, 4, 2, 2),
sample.order = NULL,
layer.order = NULL,
sample.names = NULL,
sort.by = NULL,
layer.colors = NULL
)
make.structure.plot(
admix.proportions=SPPUA,
mar = c(2, 4, 2, 2),
sample.order = NULL,
layer.order = NULL,
sample.names = c(1:17),
sort.by = NULL,
layer.colors = NULL
)
# making fake data
SPPUA<-read.csv("C:/Users/Shelby Palmer/Desktop/FA22 classes/scientific writing/fake admixture data.csv")
SPPUA1<-as.matrix(SPPUA)
SPPUA1
SPPUA1<-as.matrix(SPPUA, nrow=17, ncol=2)
SPPUA1
make.structure.plot(
admix.proportions=SPPUA1,
mar = c(2, 4, 2, 2),
sample.order = NULL,
layer.order = NULL,
sample.names = c(1:17),
sort.by = NULL,
layer.colors = NULL
)
make.structure.plot(
admix.proportions=SPPUA1,
mar = c(2, 4, 2, 2),
sample.order = NULL,
layer.order = NULL,
sample.names = c(1:34),
sort.by = NULL,
layer.colors = NULL
)
make.structure.plot(
admix.proportions=SPPUA1,
mar = c(2, 4, 2, 2),
sample.order = NULL,
layer.order = NULL,
sample.names = c(1:29),
sort.by = NULL,
layer.colors = NULL
)
make.structure.plot(
admix.proportions=SPPUA1,
mar = c(2, 4, 2, 2),
sample.order = NULL,
layer.order = NULL,
sample.names = c(1:29),
sort.by = NULL,
layer.colors = c("orange", "blue")
)
getwd()
getwd()
# Okay now put it all together
# x is the wave
FreqSpread <- function (x) {
a <- seq(0, duration(x), by = duration(x)/10)
b <- a[2]-a[1]
C <- c()
for (i in 1:(length(a)-1)) {
C[i] <- sd(meanspec(cutw(x,
from = a[i],
to = a[i]+b,
output = "Wave"),
PSD = T,
wl = 1024,
ovlp = 95,
flim = c(0,10),
plot = F)[,2])
}
return(mean(C)/sd(meanspec(x,
PSD = T,
wl = 1024,
ovlp = 95,
flim = c(0,10),
plot = F)[,2]))
}
setwd("C:/Users/Shelby Palmer/Desktop")
library(seewave)
library(tuneR)
bw <- readWave("bewickstest1.wav")
spectro(bw,
ovlp = 95,
scale = F,
flim = c(0,10),
listen = F,
grid = F)
par(new = T)
timer(bw,
dmin=0.02,
envt="hil",
msmooth=c(512, 95),
threshold=5)
bwt <- timer(bw,
dmin=0.03,
envt="hil",
msmooth=c(512, 95),
threshold=3,
plot = F)
# mean frequency spectrum (doesn't differentiate non-tonal whistles and buzzes)
meanspec(cutw(bw,
from = bwt$s.start[4],
to = bwt$s.end[4],
output = "Wave",
scaled = T),
flim = c(0,10))
# dominant frequency (more scatter in buzzy notes; quantify fit to a line?)
dfreq(cutw(bw,
from = bwt$s.start[3],
to = bwt$s.end[3],
output = "Wave",
scaled = T),
ylim = c(0,10),
ovlp = 95,
threshold = 5)
#### trying the new thing of dividing up signal periods to quantify buzziness
# get a song with a problem note
setwd("C:/Users/Shelby Palmer/Desktop/C.cupreus/practice_recordings")
CC1 <- readMP3(list.files()[2])
CC1 <- fir(CC1,
from = 1000,
to = 6000,
bandpass = T,
output = "Wave")
CCtest <- timer(CC1,
dmin=0.03,
envt="hil",
msmooth=c(512, 95),
threshold=5,
plot = F)
CC1note1 <- cutw(CC1,
from = CCtest$s.start[1],
to = CCtest$s.end[1],
output = "Wave")
# get the buzz
bw1 <- cutw(bw,
from = bwt$s.start[4],
to = bwt$s.end[4],
output = "Wave")
FreqSpread(CC1note1)
seq(0, duration(CC1note1), by = duration(CC1note1)/10)
bwfs
CC1note1
sd(meanspec(CC1note1,
PSD = T,
wl = 1024,
ovlp = 95,
flim = c(0,10),
plot = F)[,2]))
sd(meanspec(CC1note1,
PSD = T,
wl = 1024,
ovlp = 95,
flim = c(0,10),
plot = F)[,2])
FreqSpread(CC1note1)
a <- seq(0, duration(CC1note1), by = duration(CC1note1)/10)
b <- a[2]-a[1]
C <- c()
for (i in 1:(length(a)-1)) {
C[i] <- sd(meanspec(cutw(CC1note1,
from = a[i],
to = a[i]+b,
output = "Wave"),
PSD = T,
wl = 1024,
ovlp = 95,
flim = c(0,10),
plot = F)[,2])
}
# get the buzz
bw1 <- cutw(bw,
from = bwt$s.start[4],
to = bwt$s.end[4],
output = "Wave")
# go through the process with just one
# (1) cut it into 10 equal pieces along the time axis
a <- seq(0, duration(bw1), by = duration(bw1)/10)
# (1a) get the duration of a piece
b <- a[2]-a[1]
# (2) get the standard deviation of the mean frequency spectrum of the first piece (PSD to eliminate noise)
bwfs <- sd(meanspec(cutw(bw1,
from = a[1],
to = a[1]+b,
output = "Wave"),
PSD = T,
wl = 1024,
ovlp = 95,
flim = c(0,10),
plot = F)[,2])
# (3) get that value for each piece and the mean of all
C <- c()
for (i in 1:(length(a)-1)) {
C[i] <- sd(meanspec(cutw(bw1,
from = a[i],
to = a[i]+b,
output = "Wave"),
PSD = T,
wl = 1024,
ovlp = 95,
flim = c(0,10),
plot = F)[,2])
}
CM <- mean(C)
C
rm(a)
rm(b)
rm(c)
rm(C)
FreqSpread(CC1note1)
# Okay now put it all together
# x is the wave
FreqSpread <- function (x) {
a <- seq(0, duration(x), by = duration(x)/10)
b <- a[2]-a[1]
C <- c()
for (i in 1:(length(a)-1)) {
C[i] <- sd(meanspec(cutw(x,
from = a[i],
to = a[i]+b,
output = "Wave"),
PSD = T,
wl = 1024,
ovlp = 95,
# flim = c(0,10),
plot = F)[,2])
}
return(mean(C)/sd(meanspec(x,
PSD = T,
wl = 1024,
ovlp = 95,
# flim = c(0,10),
plot = F)[,2]))
}
FreqSpread(CC1note1)
FreqSpread(bw1)
bw1
CC1note1
# Okay now put it all together
# x is the wave
FreqSpread <- function (x) {
a <- seq(0, duration(x), by = duration(x)/10)
b <- a[2]-a[1]
C <- c()
for (i in 1:(length(a)-1)) {
C[i] <- sd(meanspec(cutw(x,
from = a[i],
to = a[i]+b,
output = "Wave"),
PSD = T,
wl = 512,
ovlp = 95,
# flim = c(0,10),
plot = F)[,2])
}
return(mean(C)/sd(meanspec(x,
PSD = T,
wl = 512,
ovlp = 95,
# flim = c(0,10),
plot = F)[,2]))
}
FreqSpread(CC1note1)
FreqSpread(bw1)
seq(0, duration(x), by = duration(x)/10)
seq(0, duration(CC1note1), by = duration(CC1note1)/10)
seq(0, duration(bw1), by = duration(bw1)/10)
getwd()
# 28 July 2023: make a folder of usable recordings in the github repo
setwd("C:/Users/Shelby Palmer/Desktop/C.cupreus")
list.files()
scores <- read.csv("Recording_Scoring_July_20.csv")
head(scores)
length(rownames(scores))
scores$Recording_ID[which(scores$Dan<=3 & scores$Shelby<=3)]
scores$Recording_ID
# all of the recordings which we agreed were 3 or better
scores$Recording_ID[which(scores$Dan<=3 | scores$Shelby<=3)]
# all of the recordings which we agreed were 3 or better
scores$Recording_ID[which(scores$Dan>=3 & scores$Shelby<=3)]
scores$Recording_ID[which(scores$Dan<=3 & scores$Shelby>=3)]
unique(c(scores$Recording_ID[which(scores$Dan>=3 & scores$Shelby<=3)],
scores$Recording_ID[which(scores$Dan<=3 & scores$Shelby>=3)]))
unique(c(scores[which(scores$Dan>=3 & scores$Shelby<=3),],
scores[which(scores$Dan<=3 & scores$Shelby>=3),]))
# all of the recordings which we disagreed on
scores[which(scores$Dan>=3 & scores$Shelby<=3),]
# all of the recordings which we disagreed on
scores[which(scores$Dan>3 & scores$Shelby<=3),]
scores[which(scores$Dan<=3 & scores$Shelby>3),]
# all of the recordings which we disagreed on
disagreements <- cbind(scores[which(scores$Dan>3 & scores$Shelby<=3),],
scores[which(scores$Dan<=3 & scores$Shelby>3),])
disagreements
rm(disagreements)
# all of the recordings which we disagreed on
disagreements <- rbind(scores[which(scores$Dan>3 & scores$Shelby<=3),],
scores[which(scores$Dan<=3 & scores$Shelby>3),])
disagreements
length(disagreements)
dim(disagreements)
disagreements[which(disagreements$Dan %in% c(3,4) & disagreements$Shelby %in% c(3,4)),]
# all of the recordings which we agreed were 3 or better
scores[which(scores$Dan<=3 & scores$Shelby<=3),]
# the consensus cases
# oh no my battery is dying
disagreements[which(disagreements$Recording_ID %in% c(718994,582801601,567357981,390677901)),]
usables <- rbind(scores[which(scores$Dan<=3 & scores$Shelby<=3),],
disagreements[which(disagreements$Dan %in% c(3,4) & disagreements$Shelby %in% c(3,4)),],
disagreements[which(disagreements$Recording_ID %in% c(718994,582801601,567357981,390677901)),])
usables
dim(usables)
getwd()
setwd("C:/Users/Shelby Palmer/Desktop/C.cupreus/original_recordings")
list.files()
list.files()[which(length(unlist(strsplit(list.files(), sep = "-"))))==3]
?strsplit
list.files()[which(length(unlist(strsplit(list.files(), split = "-"))))==3]
which(length(unlist(strsplit(list.files()[1:200], split = "-"))))==3
length(unlist(strsplit(list.files()[200], split = "-"))))
length(unlist(strsplit(list.files(), split = "-")))
length(unlist(strsplit(list.files()[200], split = "-")))
setwd("C:/Users/Shelby Palmer/Desktop/C.cupreus")
#### 28 July 2023: make a folder of usable recordings in the github repo ####
setwd("C:/Users/Shelby Palmer/Desktop/C.cupreus")
list.files()
scores <- read.csv("Recording_Scoring_July_20.csv")
head(scores)
length(rownames(scores))
# all of the recordings which we agreed were 3 or better
scores[which(scores$Dan<=3 & scores$Shelby<=3),]
# all of the recordings on which we disagreed
disagreements <- rbind(scores[which(scores$Dan>3 & scores$Shelby<=3),],
scores[which(scores$Dan<=3 & scores$Shelby>3),])
# the borderline cases
disagreements[which(disagreements$Dan %in% c(3,4) & disagreements$Shelby %in% c(3,4)),]
# the consensus cases
# oh no my battery is dying
disagreements[which(disagreements$Recording_ID %in% c(718994,582801601,567357981,390677901)),]
# dataframe with all the recordings that passed QC1
usables <- rbind(scores[which(scores$Dan<=3 & scores$Shelby<=3),],
disagreements[which(disagreements$Dan %in% c(3,4) & disagreements$Shelby %in% c(3,4)),],
disagreements[which(disagreements$Recording_ID %in% c(718994,582801601,567357981,390677901)),])
write.csv(usables, "usable_recordings.csv")

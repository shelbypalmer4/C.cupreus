library(installr)
?setwd
getwd
bcch1 <- read.delim("C:/Users/Shelby Palmer/Desktop/CHICKADEES/winter 2022 song analyses/BCCH measurements/Poecile.atricapillus_Apr142020_HarveyCoWestPark.Harvey.KS_gf.Table.1.selections.txt")
View(bcch1)
bcch2 <- read.delim("C:/Users/Shelby Palmer/Desktop/CHICKADEES/winter 2022 song analyses/BCCH measurements/Poecile.atricapillus_Mar142021_LionsConservancy.Cass.ND_ag.Table.1.selections.txt")
c(bcch1, bcch2)
BCCHdata<-c(bcch1, bcch2)
AllFiles <- list.files(path = "C:\Users\Shelby Palmer\Desktop\CHICKADEES\winter 2022 song analyses\BCCH measurements",
recursive = TRUE,
pattern = "\\.txt$",
full.names = TRUE)
idk <- read.delim("C:/Users/Shelby Palmer/Desktop/CHICKADEES/winter 2022 song analyses/BCCH measurements/Poecile.atricapillus_Apr142020_HarveyCoWestPark.Harvey.KS_gf.Table.1.selections.txt")
View(idk)
AllFiles <- list.files(path = "C:/Users/Shelby Palmer/Desktop/CHICKADEES/winter 2022 song analyses/BCCH measurements/",
recursive = TRUE,
pattern = "\\.txt$",
full.names = TRUE)
View(AllFiles)
install.packages("vroom",
dependencies = TRUE,
repos = "https://cran.rstudio.com")
library(vroom)
# Read all the files and create a FileName column to store filenames
BCCHsongs <- vroom(AllFiles, .id = "FileName")
# Read all the files and create a FileName column to store filenames
BCCHsongs <- vroom(AllFiles)
View(BCCHsongs)
AllFilesCa <- list.files(path = "C:/Users/Shelby Palmer/Desktop/CHICKADEES/winter 2022 song analyses/CACH measurements/",
recursive = TRUE,
pattern = "\\.txt$",
full.names = TRUE)
CACHsongs <- vroom(AllFiles)
View(CACHsongs)
AllFiles
?vroom
CACHsongs <- vroom(AllFiles, id="FileName")
View(CACHsongs)
install.packages("esquisse")
install.packages("Rtools")
install.packages(conStruct)
install.packages("conStruct")
# install.packages("conStruct")
library(conStruct)
?as.matrix
# making fake data
SPPUA<-matrix(data=c(1,1,0.9,1,0.95,1,0.85,0.5,0.55,0.6,0.2,0.25,0.2,0.1,0,0,0),
nrow=17)
make.structure.plot(
admix.proportions=SPPUA,
mar = c(2, 4, 2, 2),
sample.order = NULL,
layer.order = NULL,
sample.names = NULL,
sort.by = NULL,
layer.colors = NULL
)
# making fake data
SPPUA<-matrix(data=c(1,1,0.9,1,0.95,1,0.85,0.5,0.55,0.6,0.2,0.25,0.2,0.1,0,0,0,
0,0,0.1,0,0.05,0,0.15,0.5,0.45,0.4,0.8,0.75,0.8,0.9,1,1,1),
nrow=17,
ncol=2)
make.structure.plot(
admix.proportions=SPPUA,
mar = c(2, 4, 2, 2),
sample.order = NULL,
layer.order = NULL,
sample.names = NULL,
sort.by = NULL,
layer.colors = NULL
)
make.structure.plot(
admix.proportions=SPPUA,
mar = c(2, 4, 2, 2),
sample.order = NULL,
layer.order = NULL,
sample.names = c(1:17),
sort.by = NULL,
layer.colors = NULL
)
# making fake data
SPPUA<-read.csv("C:/Users/Shelby Palmer/Desktop/FA22 classes/scientific writing/fake admixture data.csv")
SPPUA1<-as.matrix(SPPUA)
SPPUA1
SPPUA1<-as.matrix(SPPUA, nrow=17, ncol=2)
SPPUA1
make.structure.plot(
admix.proportions=SPPUA1,
mar = c(2, 4, 2, 2),
sample.order = NULL,
layer.order = NULL,
sample.names = c(1:17),
sort.by = NULL,
layer.colors = NULL
)
make.structure.plot(
admix.proportions=SPPUA1,
mar = c(2, 4, 2, 2),
sample.order = NULL,
layer.order = NULL,
sample.names = c(1:34),
sort.by = NULL,
layer.colors = NULL
)
make.structure.plot(
admix.proportions=SPPUA1,
mar = c(2, 4, 2, 2),
sample.order = NULL,
layer.order = NULL,
sample.names = c(1:29),
sort.by = NULL,
layer.colors = NULL
)
make.structure.plot(
admix.proportions=SPPUA1,
mar = c(2, 4, 2, 2),
sample.order = NULL,
layer.order = NULL,
sample.names = c(1:29),
sort.by = NULL,
layer.colors = c("orange", "blue")
)
getwd()
CC1 <- readMP3(list.files()[2])
library(warbleR)
library(tuneR)
library(seewave)
# test: get signal periods
setwd("C:/Users/Shelby Palmer/Desktop/Chrysococcyx cupreus/recordings")
CC1 <- readMP3(list.files()[2])
CC1 <- fir(CC1,
from = 1000,
to = 6000,
bandpass = T,
output = "Wave")
# can you chop recordings without Raven?
CCtest <- timer(CC1,
dmin=0.03,
envt="hil",
msmooth=c(512, 95),
threshold=10,
plot = F)
CC1
CCtest
diff(CCtest$s.start)
which(diff(CCtest$s.start)>1)
CCtest_1 <- cutw(CC1,
from = CCtest$s.start[1],
to = CCtest$s.end[which(diff(CCtest$s.start)>1)][1],
output = "Wave")
spectro(CCtest_1,
ovlp = 95,
scale = F,
flim = c(0,6),
listen = F)
par(new = T)
timer(CCtest_1,
dmin=0.03,
envt="hil",
msmooth=c(512, 95),
threshold=10)
# can you chop recordings without Raven?
CCtest <- timer(CC1,
dmin=0.03,
envt="hil",
msmooth=c(512, 95),
threshold=5,
plot = F)
CCtest_1 <- cutw(CC1,
from = CCtest$s.start[1],
to = CCtest$s.end[which(diff(CCtest$s.start)>1)][1],
output = "Wave")
spectro(CCtest_1,
ovlp = 95,
scale = F,
flim = c(0,6),
listen = F)
par(new = T)
timer(CCtest_1,
dmin=0.03,
envt="hil",
msmooth=c(512, 95),
threshold=5)
CCtest$s.start[1]
CCtest$s.start[1]+0.1
CCtest_1 <- cutw(CC1,
from = CCtest$s.start[1]-0.1,
to = CCtest$s.end[which(diff(CCtest$s.start)>1)][1]+0.1,
output = "Wave")
spectro(CCtest_1,
ovlp = 95,
scale = F,
flim = c(0,6),
listen = F)
par(new = T)
timer(CCtest_1,
dmin=0.03,
envt="hil",
msmooth=c(512, 95),
threshold=5)
CCtest_2 <- cutw(CC1,
from = CCtest$s.start[which(diff(CCtest$s.start)>1)+1][1]-0.1,
to = CCtest$s.end[which(diff(CCtest$s.start)>1)][2]+0.1,
output = "Wave")
spectro(CCtest_2,
ovlp = 95,
scale = F,
flim = c(0,6),
listen = F)
par(new = T)
timer(CCtest_2,
dmin=0.03,
envt="hil",
msmooth=c(512, 95),
threshold=5)
diff(CCtest$s.start)
CCtest$p
which(diff(CCtest$s.start)>1)
timer(cutw(CC1,
from = CCtest$s.start[which(diff(CCtest$s.start)>1)+1][i]-0.1,
to = CCtest$s.end[which(diff(CCtest$s.start)>1)][i+1]+0.1,
output = "Wave"),
dmin=0.03,
envt="hil",
msmooth=c(512, 95),
threshold=5)
length(which(diff(CCtest$s.start)>1))
CCtest_2 <- cutw(CC1,
from = CCtest$s.start[which(diff(CCtest$s.start)>1)+1][1]-0.1,
to = CCtest$s.end[which(diff(CCtest$s.start)>1)][2]+0.1,
output = "Wave")
spectro(CCtest_2,
ovlp = 95,
scale = F,
flim = c(0,6),
listen = F)
par(new = T)
timer(CCtest_2,
dmin=0.03,
envt="hil",
msmooth=c(512, 95),
threshold=5)
CCtest
# does it work across the whole recording?
for (i in 1:length(which(diff(CCtest$s.start)>1))) {
spectro(cutw(CC1,
from = CCtest$s.start[which(diff(CCtest$s.start)>1)+1][i]-0.1,
to = CCtest$s.end[which(diff(CCtest$s.start)>1)][i+1]+0.1,
output = "Wave"),
ovlp = 95,
scale = F,
flim = c(0,6),
listen = F)
par(new = T)
timer(cutw(CC1,
from = CCtest$s.start[which(diff(CCtest$s.start)>1)+1][i]-0.1,
to = CCtest$s.end[which(diff(CCtest$s.start)>1)][i+1]+0.1,
output = "Wave"),
dmin=0.03,
envt="hil",
msmooth=c(512, 95),
threshold=5)
}
# use note onset intervals to find where songs separate (longer than 1s)
diff(CCtest$s.start)
rep(1:4, 5)
rep(1,4)
# best to make a dataframe with note measurements?
CC1df <- data.frame(note_number = rep(1:4, 22))
length(CCtest$s)
MaxDFreq2<-function(x,y) {
z <- c()
for (j in 1:length(y$s.start)) {
z[j] <- max(dfreq(cutw(x,
from = y$s.start[j],
to = y$s.end[j],
output = "Wave",
plot = F),
ovlp = 95,
wl = 1024,
plot = F)[,2])
}
return(z)
}
MaxDFreq2(CCtest_2, timer(CCtest_2,
dmin=0.03,
envt="hil",
msmooth=c(512, 95),
threshold=5))
?dfreq
max(dfreq(CC1,
tlim = c(CCtest$s.start[1],
CCtest$s.end[1]),
ovlp = 95,
wl = 1024,
plot = F)[,2])
min(dfreq(CC1,
tlim = c(CCtest$s.start[i],
CCtest$s.end[i]),
ovlp = 95,
wl = 1024,
plot = F)[,2])
dfreq(CC1,
tlim = c(CCtest$s.start[i],
CCtest$s.end[i]),
ovlp = 95,
wl = 1024,
plot = F)[1,2]
dfreq(CC1,
tlim = c(CCtest$s.start[i],
CCtest$s.end[i]),
ovlp = 95,
wl = 1024,
plot = F)[,2]
dfreq(CC1,
tlim = c(CCtest$s.start[i],
CCtest$s.end[i]),
ovlp = 95,
wl = 1024)[,2]
dfreq(CC1,
tlim = c(CCtest$s.start[i],
CCtest$s.end[i]),
ovlp = 98,
wl = 1024)[,2]
dfreq(CC1,
tlim = c(CCtest$s.start[i],
CCtest$s.end[i]),
ovlp = 98,
wl = 1024,)[1,2]
dfreq(CC1,
tlim = c(CCtest$s.start[i],
CCtest$s.end[i]),
ovlp = 98,
wl = 1024,)[,2][1]
dfreq(CC1,
tlim = c(CCtest$s.start[i],
CCtest$s.end[i]),
ovlp = 98,
wl = 1024,)[,2][length(dfreq(CC1,
tlim = c(CCtest$s.start[i],
CCtest$s.end[i]),
ovlp = 98,
wl = 1024,)[,2])]
max(abs(diff(dfreq(CC1,
tlim = c(CCtest$s.start[i],
CCtest$s.end[i]),
ovlp = 98,
wl = 1024,
plot = F)[,2])))
max(abs(diff(dfreq(CC1,
tlim = c(CCtest$s.start[1],
CCtest$s.end[1]),
ovlp = 98,
wl = 1024,
plot = F)[,2])))
dfreq(CC1,
+                    tlim = c(CCtest$s.start[1],
dfreq(CC1,
tlim = c(CCtest$s.start[1],
CCtest$s.end[1]),
ovlp = 98,
wl = 1024,
plot = F)[,2]
spectro(CCtest_1,
ovlp = 95,
scale = F,
flim = c(0,6),
listen = F)
par(new = T)
timer(CCtest_1,
dmin=0.03,
envt="hil",
msmooth=c(512, 95),
threshold=5)
CCtest$s.start[1]
dfreq(CC1,
tlim = c(CCtest$s.start[1],
CCtest$s.end[1]),
ovlp = 95,
wl = 1024,
plot = F)[,2]
max(abs(diff(dfreq(CC1,
tlim = c(CCtest$s.start[1],
CCtest$s.end[1]),
ovlp = 95,
wl = 1024,
plot = F)[,2])))
max(abs(diff(dfreq(CC1,
tlim = c(CCtest$s.start[1],
CCtest$s.end[1]),
ovlp = 98,
wl = 1024,
plot = F)[,2])))
max(abs(diff(dfreq(CC1,
tlim = c(CCtest$s.start[2],
CCtest$s.end[2]),
ovlp = 98,
wl = 1024,
plot = F)[,2])))
?peak
?fpeaks
meanspec(CCtest_1)
fpeaks(meanspec(CCtest_1))
fpeaks(meanspec(CCtest_1),)
fpeaks(meanspec(CCtest_1),plot = F)
meanspec(CC1, tlim = c(CCtest$s.start[i],
CCtest$s.end[i]))
meanspec(cutw(CC1, from = CCtest$s.start[1],
to = CCtest$s.end[i]))
meanspec(cutw(CC1,))
meanspec(cutw(CC1, from = CCtest$s.start[1],
to = CCtest$s.end[i], output = "Wave"))
fpeaks(meanspec(cutw(CC1, from = CCtest$s.start[1],
to = CCtest$s.end[i], output = "Wave")), plot = F)
fpeaks(meanspec(cutw(CC1, from = CCtest$s.start[1],
to = CCtest$s.end[1], output = "Wave")), plot = F)
fpeaks(meanspec(cutw(CC1, from = CCtest$s.start[2],
to = CCtest$s.end[2], output = "Wave")), plot = F)
fpeaks(meanspec(cutw(CC1, from = CCtest$s.start[3],
to = CCtest$s.end[3], output = "Wave")), plot = F)
fpeaks(meanspec(cutw(CC1, from = CCtest$s.start[4],
to = CCtest$s.end[4], output = "Wave")), plot = F)
?fpeaks
fpeaks(spec(cutw(CC1, from = CCtest$s.start[4],
to = CCtest$s.end[4], output = "Wave")), plot = F)
fpeaks(spec(cutw(CC1, from = CCtest$s.start[1],
to = CCtest$s.end[1], output = "Wave")), plot = F)
fpeaks(meanspec(cutw(CC1, from = CCtest$s.start[1],
to = CCtest$s.end[1], output = "Wave")), plot = F, nmax = 1)
fpeaks(meanspec(cutw(CC1, from = CCtest$s.start[1],
to = CCtest$s.end[1], output = "Wave")), plot = F, nmax = 1)[1,1]
paste("CC1", "1", collapse = "_")
paste("CC1", "1", collapse = ".")
paste("CC1_", "1")
paste
?paste
paste("CC1", "1", sep = "_")
rep(paste("CC1", "1", sep = "_"), 4)
for (i in 1:22) {
print(rep(paste("CC1", i, sep = "_"), 4))
}
for (i in 1:22) {
CC1df$song_name[i] <- rep(paste("CC1", i, sep = "_"), 4)
}
for (i in 1:22) {
rep(paste("CC1", i, sep = "_"), 4)
}
song_names <- c()
for (i in 1:22) {
song_names[i] <- rep(paste("CC1", i, sep = "_"), 4)
}
warnings()
song_names
rep(paste("CC1", i, sep = "_"), 4)
seq(1, 10, 2)
for (i in 1:length(CC1df$note_number)) {
CC1df$duration[i] <- CCtest$s[i]
CC1df$max_freq[i] <- max(dfreq(CC1,
tlim = c(CCtest$s.start[i],
CCtest$s.end[i]),
ovlp = 98,
wl = 1024,
plot = F)[,2])
CC1df$min_freq[i] <- min(dfreq(CC1,
tlim = c(CCtest$s.start[i],
CCtest$s.end[i]),
ovlp = 98,
wl = 1024,
plot = F)[,2])
CC1df$median_freq[i] <- median(dfreq(CC1,
tlim = c(CCtest$s.start[i],
CCtest$s.end[i]),
ovlp = 98,
wl = 1024,
plot = F)[,2])
CC1df$onset_freq[i] <- dfreq(CC1,
tlim = c(CCtest$s.start[i],
CCtest$s.end[i]),
ovlp = 98,
wl = 1024,)[,2][1]
CC1df$offset_freq[i] <- dfreq(CC1,
tlim = c(CCtest$s.start[i],
CCtest$s.end[i]),
ovlp = 98,
wl = 1024,)[,2][length(dfreq(CC1,
tlim = c(CCtest$s.start[i],
CCtest$s.end[i]),
ovlp = 98,
wl = 1024,)[,2])]
CC1df$sd_freq[i] <- sd(dfreq(CC1,
tlim = c(CCtest$s.start[i],
CCtest$s.end[i]),
ovlp = 98,
wl = 1024,
plot = F)[,2])
CC1df$abs_slope[i] <- max(abs(diff(dfreq(CC1,
tlim = c(CCtest$s.start[i],
CCtest$s.end[i]),
ovlp = 98,
wl = 1024,
plot = F)[,2])))
CC1df$peak_freq[i] <- fpeaks(meanspec(cutw(CC1,
from = CCtest$s.start[i],
to = CCtest$s.end[i],
output = "Wave")),
plot = F,
nmax = 1)[1,1]
}
View(CC1df)
CC1df <- CC1df[,-2]
CC1df
head(CC1df)

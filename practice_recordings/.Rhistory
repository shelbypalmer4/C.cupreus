size=1.25,
color="yellow") +
# getting rid of grid, background, axis number labels, tick marks...this is gonna be a handy little chunk of code I suspect
theme(panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
panel.background = element_blank(),
axis.text.x=element_blank(),
axis.ticks.x=element_blank(),
axis.text.y=element_blank(),
axis.ticks.y=element_blank()) +
# adding arrows to the axes
geom_segment(aes(x=-4.4,
xend = -4.4,
y=0,
yend = 0.45),
size=1.5,
arrow = arrow(length = unit(0.3,"cm"))) +
geom_segment(aes(x=-4.43,
xend = 4.7,
y=0,
yend = 0),
size=1.5,
arrow = arrow(length = unit(0.3,"cm"))) +
# adding title and axis labels
xlab(expression("Dispersal Ability")) +
ylab("Speciation Rate")
ggplot(data = data.frame(x = c(-4,4)),
aes(x)) +
# plotting the student's t distribution at the right fraction of x to give us the steepness we want
stat_function(fun = function(x) dt(0.6*x, df = 12),
size=1.25,
color="blue") +
# getting rid of grid, background, axis number labels, tick marks...this is gonna be a handy little chunk of code I suspect
theme(panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
panel.background = element_blank(),
axis.text.x=element_blank(),
axis.ticks.x=element_blank(),
axis.text.y=element_blank(),
axis.ticks.y=element_blank()) +
# adding arrows to the axes
geom_segment(aes(x=-4.4,
xend = -4.4,
y=0,
yend = 0.45),
size=1.5,
arrow = arrow(length = unit(0.3,"cm"))) +
geom_segment(aes(x=-4.43,
xend = 4.7,
y=0,
yend = 0),
size=1.5,
arrow = arrow(length = unit(0.3,"cm"))) +
# adding title and axis labels
xlab(expression("Dispersal Ability")) +
ylab("Speciation Rate")
ggplot(data = data.frame(x = c(-4,4)),
aes(x)) +
# plotting the student's t distribution at the right fraction of x to give us the steepness we want
stat_function(fun = function(x) dt(0.6*x, df = 12),
size=1.25,
color="grey65") +
# getting rid of grid, background, axis number labels, tick marks...this is gonna be a handy little chunk of code I suspect
theme(panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
panel.background = element_blank(),
axis.text.x=element_blank(),
axis.ticks.x=element_blank(),
axis.text.y=element_blank(),
axis.ticks.y=element_blank()) +
# adding arrows to the axes
geom_segment(aes(x=-4.4,
xend = -4.4,
y=0,
yend = 0.45),
size=1.5,
arrow = arrow(length = unit(0.3,"cm"))) +
geom_segment(aes(x=-4.43,
xend = 4.7,
y=0,
yend = 0),
size=1.5,
arrow = arrow(length = unit(0.3,"cm"))) +
# adding title and axis labels
xlab(expression("Dispersal Ability")) +
ylab("Speciation Rate")
ggplot(data = data.frame(x = c(-4,4)),
aes(x)) +
# plotting the student's t distribution at the right fraction of x to give us the steepness we want
stat_function(fun = function(x) dt(0.6*x, df = 12),
size=1.25,
color="cadetblue4") +
# getting rid of grid, background, axis number labels, tick marks...this is gonna be a handy little chunk of code I suspect
theme(panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
panel.background = element_blank(),
axis.text.x=element_blank(),
axis.ticks.x=element_blank(),
axis.text.y=element_blank(),
axis.ticks.y=element_blank()) +
# adding arrows to the axes
geom_segment(aes(x=-4.4,
xend = -4.4,
y=0,
yend = 0.45),
size=1.5,
arrow = arrow(length = unit(0.3,"cm"))) +
geom_segment(aes(x=-4.43,
xend = 4.7,
y=0,
yend = 0),
size=1.5,
arrow = arrow(length = unit(0.3,"cm"))) +
# adding title and axis labels
xlab(expression("Dispersal Ability")) +
ylab("Speciation Rate")
ggplot(data = data.frame(x = c(-4,4)),
aes(x)) +
# plotting the student's t distribution at the right fraction of x to give us the steepness we want
stat_function(fun = function(x) dt(0.6*x, df = 12),
size=1.25,
color="mediumpurple1") +
# getting rid of grid, background, axis number labels, tick marks...this is gonna be a handy little chunk of code I suspect
theme(panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
panel.background = element_blank(),
axis.text.x=element_blank(),
axis.ticks.x=element_blank(),
axis.text.y=element_blank(),
axis.ticks.y=element_blank()) +
# adding arrows to the axes
geom_segment(aes(x=-4.4,
xend = -4.4,
y=0,
yend = 0.45),
size=1.5,
arrow = arrow(length = unit(0.3,"cm"))) +
geom_segment(aes(x=-4.43,
xend = 4.7,
y=0,
yend = 0),
size=1.5,
arrow = arrow(length = unit(0.3,"cm"))) +
# adding title and axis labels
xlab(expression("Dispersal Ability")) +
ylab("Speciation Rate")
ggplot(data = data.frame(x = c(-4,4)),
aes(x)) +
# plotting the student's t distribution at the right fraction of x to give us the steepness we want
stat_function(fun = function(x) dt(0.6*x, df = 12),
size=1.25,
color=FF0000) +
# getting rid of grid, background, axis number labels, tick marks...this is gonna be a handy little chunk of code I suspect
theme(panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
panel.background = element_blank(),
axis.text.x=element_blank(),
axis.ticks.x=element_blank(),
axis.text.y=element_blank(),
axis.ticks.y=element_blank()) +
# adding arrows to the axes
geom_segment(aes(x=-4.4,
xend = -4.4,
y=0,
yend = 0.45),
size=1.5,
arrow = arrow(length = unit(0.3,"cm"))) +
geom_segment(aes(x=-4.43,
xend = 4.7,
y=0,
yend = 0),
size=1.5,
arrow = arrow(length = unit(0.3,"cm"))) +
# adding title and axis labels
xlab(expression("Dispersal Ability")) +
ylab("Speciation Rate")
ggplot(data = data.frame(x = c(-4,4)),
aes(x)) +
# plotting the student's t distribution at the right fraction of x to give us the steepness we want
stat_function(fun = function(x) dt(0.6*x, df = 12),
size=1.25,
color="FF0000") +
# getting rid of grid, background, axis number labels, tick marks...this is gonna be a handy little chunk of code I suspect
theme(panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
panel.background = element_blank(),
axis.text.x=element_blank(),
axis.ticks.x=element_blank(),
axis.text.y=element_blank(),
axis.ticks.y=element_blank()) +
# adding arrows to the axes
geom_segment(aes(x=-4.4,
xend = -4.4,
y=0,
yend = 0.45),
size=1.5,
arrow = arrow(length = unit(0.3,"cm"))) +
geom_segment(aes(x=-4.43,
xend = 4.7,
y=0,
yend = 0),
size=1.5,
arrow = arrow(length = unit(0.3,"cm"))) +
# adding title and axis labels
xlab(expression("Dispersal Ability")) +
ylab("Speciation Rate")
ggplot(data = data.frame(x = c(-4,4)),
aes(x)) +
# plotting the student's t distribution at the right fraction of x to give us the steepness we want
stat_function(fun = function(x) dt(0.6*x, df = 12),
size=1.25,
color="grey65") +
# getting rid of grid, background, axis number labels, tick marks...this is gonna be a handy little chunk of code I suspect
theme(panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
panel.background = element_blank(),
axis.text.x=element_blank(),
axis.ticks.x=element_blank(),
axis.text.y=element_blank(),
axis.ticks.y=element_blank()) +
# adding arrows to the axes
geom_segment(aes(x=-4.4,
xend = -4.4,
y=0,
yend = 0.45),
size=1.5,
arrow = arrow(length = unit(0.3,"cm"))) +
geom_segment(aes(x=-4.43,
xend = 4.7,
y=0,
yend = 0),
size=1.5,
arrow = arrow(length = unit(0.3,"cm"))) +
# adding title and axis labels
xlab(expression("Dispersal Ability")) +
ylab("Speciation Rate")
library(tidyverse)
library(installr)
?setwd
getwd
bcch1 <- read.delim("C:/Users/Shelby Palmer/Desktop/CHICKADEES/winter 2022 song analyses/BCCH measurements/Poecile.atricapillus_Apr142020_HarveyCoWestPark.Harvey.KS_gf.Table.1.selections.txt")
View(bcch1)
bcch2 <- read.delim("C:/Users/Shelby Palmer/Desktop/CHICKADEES/winter 2022 song analyses/BCCH measurements/Poecile.atricapillus_Mar142021_LionsConservancy.Cass.ND_ag.Table.1.selections.txt")
c(bcch1, bcch2)
BCCHdata<-c(bcch1, bcch2)
AllFiles <- list.files(path = "C:\Users\Shelby Palmer\Desktop\CHICKADEES\winter 2022 song analyses\BCCH measurements",
recursive = TRUE,
pattern = "\\.txt$",
full.names = TRUE)
idk <- read.delim("C:/Users/Shelby Palmer/Desktop/CHICKADEES/winter 2022 song analyses/BCCH measurements/Poecile.atricapillus_Apr142020_HarveyCoWestPark.Harvey.KS_gf.Table.1.selections.txt")
View(idk)
AllFiles <- list.files(path = "C:/Users/Shelby Palmer/Desktop/CHICKADEES/winter 2022 song analyses/BCCH measurements/",
recursive = TRUE,
pattern = "\\.txt$",
full.names = TRUE)
View(AllFiles)
install.packages("vroom",
dependencies = TRUE,
repos = "https://cran.rstudio.com")
library(vroom)
# Read all the files and create a FileName column to store filenames
BCCHsongs <- vroom(AllFiles, .id = "FileName")
# Read all the files and create a FileName column to store filenames
BCCHsongs <- vroom(AllFiles)
View(BCCHsongs)
AllFilesCa <- list.files(path = "C:/Users/Shelby Palmer/Desktop/CHICKADEES/winter 2022 song analyses/CACH measurements/",
recursive = TRUE,
pattern = "\\.txt$",
full.names = TRUE)
CACHsongs <- vroom(AllFiles)
View(CACHsongs)
AllFiles
?vroom
CACHsongs <- vroom(AllFiles, id="FileName")
View(CACHsongs)
install.packages("esquisse")
install.packages("Rtools")
install.packages(conStruct)
install.packages("conStruct")
# install.packages("conStruct")
library(conStruct)
?as.matrix
# making fake data
SPPUA<-matrix(data=c(1,1,0.9,1,0.95,1,0.85,0.5,0.55,0.6,0.2,0.25,0.2,0.1,0,0,0),
nrow=17)
make.structure.plot(
admix.proportions=SPPUA,
mar = c(2, 4, 2, 2),
sample.order = NULL,
layer.order = NULL,
sample.names = NULL,
sort.by = NULL,
layer.colors = NULL
)
# making fake data
SPPUA<-matrix(data=c(1,1,0.9,1,0.95,1,0.85,0.5,0.55,0.6,0.2,0.25,0.2,0.1,0,0,0,
0,0,0.1,0,0.05,0,0.15,0.5,0.45,0.4,0.8,0.75,0.8,0.9,1,1,1),
nrow=17,
ncol=2)
make.structure.plot(
admix.proportions=SPPUA,
mar = c(2, 4, 2, 2),
sample.order = NULL,
layer.order = NULL,
sample.names = NULL,
sort.by = NULL,
layer.colors = NULL
)
make.structure.plot(
admix.proportions=SPPUA,
mar = c(2, 4, 2, 2),
sample.order = NULL,
layer.order = NULL,
sample.names = c(1:17),
sort.by = NULL,
layer.colors = NULL
)
# making fake data
SPPUA<-read.csv("C:/Users/Shelby Palmer/Desktop/FA22 classes/scientific writing/fake admixture data.csv")
SPPUA1<-as.matrix(SPPUA)
SPPUA1
SPPUA1<-as.matrix(SPPUA, nrow=17, ncol=2)
SPPUA1
make.structure.plot(
admix.proportions=SPPUA1,
mar = c(2, 4, 2, 2),
sample.order = NULL,
layer.order = NULL,
sample.names = c(1:17),
sort.by = NULL,
layer.colors = NULL
)
make.structure.plot(
admix.proportions=SPPUA1,
mar = c(2, 4, 2, 2),
sample.order = NULL,
layer.order = NULL,
sample.names = c(1:34),
sort.by = NULL,
layer.colors = NULL
)
make.structure.plot(
admix.proportions=SPPUA1,
mar = c(2, 4, 2, 2),
sample.order = NULL,
layer.order = NULL,
sample.names = c(1:29),
sort.by = NULL,
layer.colors = NULL
)
make.structure.plot(
admix.proportions=SPPUA1,
mar = c(2, 4, 2, 2),
sample.order = NULL,
layer.order = NULL,
sample.names = c(1:29),
sort.by = NULL,
layer.colors = c("orange", "blue")
)
getwd()
getwd()
setwd("C:/Users/Shelby Palmer/Desktop")
library(seewave)
library(tuneR)
bw <- readMP3("bewickstest.mp3")
bw
bw <- readWave("bewickstest1.wav")
spectro(bw,
ovlp = 95,
scale = F,
flim = c(0,10),
listen = F,
grid = F)
par(new = T)
timer(bw,
dmin=0.03,
envt="hil",
msmooth=c(512, 95),
threshold=5)
spectro(bw,
ovlp = 95,
scale = F,
flim = c(0,10),
listen = F,
grid = F)
par(new = T)
timer(bw,
dmin=0.03,
envt="hil",
msmooth=c(512, 95),
threshold=3)
bwt <- timer(bw,
dmin=0.03,
envt="hil",
msmooth=c(512, 95),
threshold=3)
meanspec(cutw(bw,
from = CCtest$s.start[1],
to = CCtest$s.end[1],
output = "Wave"))
meanspec(cutw(bw,
from = bwt$s.start[1],
to = bwt$s.end[1],
output = "Wave"))
meanspec(cutw(bw,
from = bwt$s.start[2],
to = bwt$s.end[2],
output = "Wave"))
meanspec(cutw(bw,
from = bwt$s.start[3],
to = bwt$s.end[3],
output = "Wave"))
meanspec(cutw(bw,
from = bwt$s.start[4],
to = bwt$s.end[4],
output = "Wave"))
meanspec(cutw(bw,
from = bwt$s.start[5],
to = bwt$s.end[5],
output = "Wave"))
?meanspec
?spec
spec(cutw(bw,
from = bwt$s.start[4],
to = bwt$s.end[4],
output = "Wave"))
spec(cutw(bw,
from = bwt$s.start[3],
to = bwt$s.end[3],
output = "Wave"))
# test: get signal periods
setwd("C:/Users/Shelby Palmer/Desktop/C.cupreus/practice_recordings")
CC1 <- readMP3(list.files()[2])
CC1 <- fir(CC1,
from = 1000,
to = 6000,
bandpass = T,
output = "Wave")
# can I get accurate signal periods across a whole recording?
CCtest <- timer(CC1,
dmin=0.03,
envt="hil",
msmooth=c(512, 95),
threshold=5,
plot = F #change to T to see where measurements are taken
)
# get just the first song
CCtest_1 <- cutw(CC1,
from = CCtest$s.start[1]-0.1,
to = CCtest$s.end[which(diff(CCtest$s.start)>1)][1]+0.1,
output = "Wave")
spectro(CCtest_1,
ovlp = 95,
scale = F,
flim = c(0,10),
listen = F,
grid = F)
par(new = T)
timer(CCtest_1,
dmin=0.03,
envt="hil",
msmooth=c(512, 95),
threshold=5)
meanspec(cutw(bw,
from = CCtest_1$s.start[1],
to = CCtest_1$s.end[1],
output = "Wave"))
h <- timer(CCtest_1,
dmin=0.03,
envt="hil",
msmooth=c(512, 95),
threshold=5)
meanspec(cutw(CCtest_1,
from = h$s.start[1],
to = h$s.end[1],
output = "Wave"))
meanspec(cutw(CCtest_1,
from = h$s.start[2],
to = h$s.end[2],
output = "Wave"))
meanspec(cutw(CCtest_1,
from = h$s.start[3],
to = h$s.end[3],
output = "Wave"))
meanspec(cutw(bw,
from = bwt$s.start[3],
to = bwt$s.end[3],
output = "Wave",
PMF = T))
meanspec(cutw(bw,
from = bwt$s.start[3],
to = bwt$s.end[3],
output = "Wave",
scaled = T))
rm(fishanova)
rm(iamspeed)
rm(euroRS)
rm(EuropeanRedSquirrel)
rm(fish)
rm(LDA1)
rm(LDA1.pred)
rm(manova1)
rm(minimus)
rm(otters)
rm(Sceloporussprintspeed_mendeley)
rm(TamArc)
rm(Tamias_Arctos)
rm(rachel)
rm(ross)
rm(bugsmodel)
rm(parameters)
rm(bats)
